name "pituki"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
using_library "pcl_registration-1.7"
using_library "pcl_filters-1.7"
using_library "pcl_kdtree-1.7"
using_library "pcl_features-1.7"
using_library "pcl_keypoints-1.7"
using_library "pcl_io-1.7"
using_library "flann"
using_library "cpu_tsdf"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
import_types_from "base"
import_types_from "pitukiTypes.hpp"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the pituki namespace.
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #*************************
    #**** Task Properties ****
    #*************************
    property('sensor_point_cloud_height', 'int').
        doc 'PCL Point clouds needs to be organized. It will take this property to organize them.'

    property('sensor_point_cloud_width', 'int').
        doc 'PCL Point clouds needs to be organized. It will take this property to organize them.'

    property("output_ply", "/std/string", "").
        doc "resulting ply file"

    property('bfilter_config', 'pituki/BilateralFilterConfiguration').
        doc 'Configuration parameters for Bilateral filter.'

    property('downsample_size', 'base::Vector3d').
        doc 'Size for the downsample process of the point cloud'

    property('outlierfilter_config', 'pituki/OutlierRemovalFilterConfiguration').
        doc 'Configuration parameters for Radius Outlier Removal filter.'

    property('tsdf_config', 'pituki/TSDFConfiguration').
        doc 'Configuration parameters for TSDF.'

    #******************************
    #******* Input ports  *********
    #******************************
    input_port('point_cloud_samples', 'base/samples/Pointcloud').
        doc 'Point cloud samples.'

    #******************************
    #******* Transformer  *********
    #******************************
    transformer do
        transform "sensor", "world" # sensor in world in "Source in target" convention
        align_port("point_cloud_samples", 0.1)
        max_latency(0.2)
    end

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('point_cloud_samples_out', 'base/samples/Pointcloud').
        doc 'Output point cloud.'

    port_driven
end

